var dtos = Session.CreateCriteria<Authorization>()
  .CreateAlias("Application", "a", JoinType.InnerJoin)
  .CreateAlias("User", "u", JoinType.LeftOuterJoin)
  .CreateAlias("UserGroup", "g", JoinType.LeftOuterJoin)
  .CreateAlias("Permission", "p", JoinType.InnerJoin)
  .SetProjection(Projections.ProjectionList()
    .Add(Projections.Id(), "Id")
    .Add(Projections.Property("a.Id"), "ApplicationId")
    .Add(Projections.Property("a.Name"), "ApplicationName")
    .Add(Projections.Property("u.Id"), "UserId")
    .Add(Projections.Property("u.UserName"), "Username")
    .Add(Projections.Property("g.Id"), "UserGroupId")
    .Add(Projections.Property("g.Name"), "UserGroupName")
    .Add(Projections.Property("p.Id"), "PermissionId")
    .Add(Projections.Property("p.Name"), "PermissionName")
    .Add(Projections.Property("p.Description"), "PermissionDescription"))
  .SetResultTransformer(new AliasToBeanResultTransformer(typeof(AuthorizationDto)))
  .Future<AuthorizationDto>();


Person personAlias = null;

IList<Person> persons = 
        session.QueryOver<Person>(() => personAlias).WithSubquery
          .WhereExists(QueryOver.Of<Cat>()
             .Where(c => c.Age > 5)
             .And(c => c.Owner.Id == personAlias.Id)
             .Select(c => c.Owner))
          .List<Person>();

IQueryOver<Relation> actual =
   CreateTestQueryOver<Relation>()
    .Inner.JoinQueryOver(r => r.Related1)
    .Left.JoinQueryOver(r => r.Related2)
    .Right.JoinQueryOver(r => r.Related3)
    .Full.JoinQueryOver(r => r.Related4)
    .JoinQueryOver(r => r.Collection1, () => collection1Alias)
    .Left.JoinQueryOver(r => r.Collection2, () => collection2Alias)
    .Right.JoinQueryOver(r => r.Collection3)
    .Full.JoinQueryOver(r => r.People, () => personAlias); 

	DbSession.CreateCriteria(myDynamicallyDeterminedType)
    .Add(Restrictions.On<Listing>(l => l.field == value))
    .List<Listing>();

