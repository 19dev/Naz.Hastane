var dtos = Session.CreateCriteria<Authorization>()
  .CreateAlias("Application", "a", JoinType.InnerJoin)
  .CreateAlias("User", "u", JoinType.LeftOuterJoin)
  .CreateAlias("UserGroup", "g", JoinType.LeftOuterJoin)
  .CreateAlias("Permission", "p", JoinType.InnerJoin)
  .SetProjection(Projections.ProjectionList()
    .Add(Projections.Id(), "Id")
    .Add(Projections.Property("a.Id"), "ApplicationId")
    .Add(Projections.Property("a.Name"), "ApplicationName")
    .Add(Projections.Property("u.Id"), "UserId")
    .Add(Projections.Property("u.UserName"), "Username")
    .Add(Projections.Property("g.Id"), "UserGroupId")
    .Add(Projections.Property("g.Name"), "UserGroupName")
    .Add(Projections.Property("p.Id"), "PermissionId")
    .Add(Projections.Property("p.Name"), "PermissionName")
    .Add(Projections.Property("p.Description"), "PermissionDescription"))
  .SetResultTransformer(new AliasToBeanResultTransformer(typeof(AuthorizationDto)))
  .Future<AuthorizationDto>();


Person personAlias = null;

IList<Person> persons = 
        session.QueryOver<Person>(() => personAlias).WithSubquery
          .WhereExists(QueryOver.Of<Cat>()
             .Where(c => c.Age > 5)
             .And(c => c.Owner.Id == personAlias.Id)
             .Select(c => c.Owner))
          .List<Person>();

IQueryOver<Relation> actual =
   CreateTestQueryOver<Relation>()
    .Inner.JoinQueryOver(r => r.Related1)
    .Left.JoinQueryOver(r => r.Related2)
    .Right.JoinQueryOver(r => r.Related3)
    .Full.JoinQueryOver(r => r.Related4)
    .JoinQueryOver(r => r.Collection1, () => collection1Alias)
    .Left.JoinQueryOver(r => r.Collection2, () => collection2Alias)
    .Right.JoinQueryOver(r => r.Collection3)
    .Full.JoinQueryOver(r => r.People, () => personAlias); 

	DbSession.CreateCriteria(myDynamicallyDeterminedType)
    .Add(Restrictions.On<Listing>(l => l.field == value))
    .List<Listing>();

public IEnumerable<ordereventrollup> GetRolledUpEventsFor(DateTime tradeDate, IEnumerable<string> tickers)  
        {  
            return worker.On(connection, session =>  
                                             {  
                                                 OrderEventRollup rollup = null;  
                                                 return session.QueryOver<orderevent>()  
                                                     .Where(x => x.TradeDate == tradeDate)  
                                                     .WhereRestrictionOn(x => x.Ticker).IsIn(tickers.ToArray())  
                                                     .Select(  
                                                         list =>  
                                                         list.SelectGroup(x => x.Ticker).WithAlias(() => rollup.Ticker)  
                                                             .SelectSum(x => x.Shares).WithAlias(() => rollup.SharesTotal))  
                                                     .TransformUsing(Transformers.AliasToBean<ordereventrollup>())  
                                                     .List<ordereventrollup>();  
                                             });  
        }  
</ordereventrollup></ordereventrollup></orderevent></string></ordereventrollup>  
public IEnumerable<broker> GetBrokersByCode(IEnumerable<string> brokerCodes)  
       {  
           if (brokerCodes.Count() == 0) return Enumerable.Empty<broker>();  
           return worker.On(connection, session =>  
                                        session.Query<broker>()  
                                            .Where(x => brokerCodes.Contains(x.Code))  
                                            .ToList()  
               );  
       }  
/broker></broker></string></broker>  
public IEnumerable<order> GetByTradeDateAndTicker(DateTime tradeDate, string ticker)  
        {  
            return worker.On(connection, session =>  
                                             {  
                                                 CSMSecurity security = null;  
                                                 return session.QueryOver<crd.order>()  
                                                     .Fetch(x => x.CSMSecurity).Eager  
                                                     .Fetch(x => x.TSOrderSecuritySpec).Eager  
                                                     .Fetch(x => x.CSMSecurity.CSMSecurityType).Eager  
                                                     .JoinAlias(x => x.CSMSecurity,() => security)  
                                                     .Where(x => x.TradeDate == tradeDate)  
                                                     .Where(() => security.Ticker == ticker)  
                                                     .List();  
                                             });  
        }  
</crd.order></order>  

sortOrder = _nHibernateSession.QueryOver<DeclinedReason>() 
         .Where(dr => dr.Unit.Id == newReason.Unit.Id) 
         .SelectList(x => x.SelectMax(y => y.SortOrder)) 
         .Take(1) 
.SingleOrDefault<int>();

var ss = session
    .CreateQuery("SELECT MIN(VisitNo) FROM PatientVisit as visit WHERE visit.Patient.PatientNo =" + patient.PatientNo)
    .List();
int id = 1000;
if (ss[0] != null)
    id = Convert.ToInt32(ss[0].ToString());
id -= 1;
return id.ToString();


var catDetails =
    session.QueryOver<Cat>()
        .Select(
            c => c.Name,
            c => c.Age)
        .List<object[]>()
        .Select(properties => new {
            CatName = (string)properties[0],
            CatAge = (int)properties[1],
            });
            
Console.WriteLine(catDetails[0].CatName);
Console.WriteLine(catDetails[0].CatAge);

If I have a QueryOver like this: 
var result = Session.QueryOver<Parent>().JoinQueryOver(p => 
p.Child).SelectList(list => list.SelectGroup(p => p.Child.Property)); 

I get an error 'could not resolve property: Child.Property of: Parent'. 
However, if I rewrite it to look like this: 

var result = Session.QueryOver<Parent>().JoinQueryOver(p => p.Child, () => 
childAlias).SelectList(list => list.SelectGroup(childAlias.Property)); 
It works fine. How would I do this without the alias? 

Approach one:

Session.QueryOver<Foo>().Fetch(x => x.A).Fetch(x => x.A.B).Fetch(x => x.A.B.C)
Approach two:

A a = null;
B b = null;
C c = null;

Session.QueryOver<Foo>()
    .JoinAlias(x => x.A, () => a)
    .JoinAlias(() => a.B, () => b)
    .JoinAlias(() => b.C, () => c)
Both work (altough I'm not exactly sure if one of them generated "inner" and the other one "outer" joins).


    Client clientAlias = null;

    var query = Session.QueryOver<Client>(() => clientAlias)

        .Select(
            Projections.Distinct(
                Projections.ProjectionList()
                    .Add(Projections.Property<Client>(x => x.Id).As("Id"))
                    .Add(Projections.Property<Client>(x => x.Name).As("Name"))
                    .Add(Projections.Property<Client>(x => x.Surname).As("Surname"))
                    .Add(Projections.Property<Client>(x => x.GivenName).As("GivenName"))
                    .Add(Projections.Property<Client>(x => x.EmailAddress).As("EmailAddress"))
                    .Add(Projections.Property<Client>(x => x.MobilePhone).As("MobilePhone"))
            )
        )
        .TransformUsing(Transformers.AliasToBean<Client>())

        .OrderBy(() => clientAlias.Surname).Asc
        .ThenBy(() => clientAlias.GivenName).Asc;

    var count = query
        .ToRowCountQuery()
        .FutureValue<int>();

    return query
        .Take(pageSize)
        .Skip(Pagination.FirstResult(pageIndex, pageSize))
        .List<Client>()
        .ToPagedList(pageIndex, pageSize, count.Value);
}


var moviesOnCDs = 
    s.QueryOver<MovieOnCd>() 
        .Select(Projections.Distinct(Projections.Property<MovieOnCd>(moc => 
moc.Movie))) 
        .List<int>(); 

